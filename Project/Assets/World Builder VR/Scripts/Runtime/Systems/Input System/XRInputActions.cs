//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/World Builder VR/XR/Samples/XR Interaction Toolkit/1.0.0-pre.8/Default Input Actions/XRI Default Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace WorldBuilderVR.InputSystem
{
    public partial class @XRInputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @XRInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""XRI Default Input Actions"",
    ""maps"": [
        {
            ""name"": ""XRI HMD"",
            ""id"": ""09ff3ccc-21b4-4346-a3a2-7c978b5af892"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""1a9029f8-7a46-46b9-9eff-e9ae8365f611"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""aed87fe6-2b01-4dd2-a8fa-195578fd8158"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cff1f981-6e1f-4e2c-a90c-715a0ea2e80e"",
                    ""path"": ""<XRHMD>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2017383-a3f6-4c46-acb1-012b8eece9cc"",
                    ""path"": ""<XRHMD>/centerEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI LeftHand View"",
            ""id"": ""5c5ec87e-ffea-40ed-8f9f-b8e69a727c85"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""b81a9fb8-29e7-4b8a-af0c-1bc0b1a8404a"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""e057f5c2-9f7d-4808-8b46-412c11b0c3ad"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""21b49573-c223-4426-a8ea-d7d0eeca2ba0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Activate"",
                    ""type"": ""Button"",
                    ""id"": ""4df3ff86-7b7a-48a0-a36e-61d114bedfd6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UI Press"",
                    ""type"": ""Button"",
                    ""id"": ""3c8d9382-97ce-4174-bf3f-72f531d09652"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Haptic Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d15c3502-92e7-484d-ba6f-ae7ee1ccd901"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport Select"",
                    ""type"": ""Button"",
                    ""id"": ""b1c9291f-f519-4d52-8c1d-4331fc2b4fcf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport Mode Activate"",
                    ""type"": ""Button"",
                    ""id"": ""993ec305-c2fc-414b-a885-0cb283f1a476"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport Mode Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""b3680e02-a1d4-4ac4-9f58-7f929f3ef4a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""e532d7c6-1c3d-413f-ba8d-034a693fdddc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""0dc5eb84-0d48-4981-ae18-c9f7b559ea02"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate Anchor"",
                    ""type"": ""Value"",
                    ""id"": ""fe10217d-4af0-4426-9a54-1ab57787bfcf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Translate Anchor"",
                    ""type"": ""Value"",
                    ""id"": ""a8fae8fa-3e18-44da-ac01-d1e5b4c0ea82"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""de6f1a07-935a-49ca-8de1-81dc469752cc"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""babd6043-a29a-4162-86ff-c793f7b5baef"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""84d193cf-cbfa-4cf7-99b0-40d40f19384b"",
                    ""path"": ""<XRController>{LeftHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""f6aaa03c-d79f-4dd6-a236-791133edd273"",
                    ""path"": ""<XRController>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""43a54bda-db38-423e-8f7a-06572c974ab3"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6970cac1-6044-4980-bf80-f574922c1463"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis"",
                    ""interactions"": ""Sector(directions=-1)"",
                    ""processors"": """",
                    ""groups"": ""Noncontinuous Move"",
                    ""action"": ""Teleport Mode Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4f138c4-2f40-4b74-83f0-b77d8b3d2dc5"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Teleport Mode Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba3576e0-c40a-41b8-925e-46a9e0b8a191"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis"",
                    ""interactions"": ""Sector(directions=-1,sweepBehavior=3)"",
                    ""processors"": """",
                    ""groups"": ""Noncontinuous Move"",
                    ""action"": ""Teleport Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b81da6b3-63da-4d3d-bbc7-f53c223339f0"",
                    ""path"": ""<XRController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Teleport Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""d0c94ac9-5b7a-4970-b416-f8a56f15c714"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""9b56c511-3498-476a-acac-fe6ecc0636de"",
                    ""path"": ""<XRController>{LeftHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""bd368910-722d-47d3-be4a-fec5fa5d89c3"",
                    ""path"": ""<XRController>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""1edb49cc-b254-40d2-86a2-9bc486bf24fd"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fe36bf2d-638b-4543-a9cc-e0de6cf81b70"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a42441c3-185d-4bee-98f3-5c9cc580b07f"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0763b59b-8ab1-49ac-b51d-adf3ece4fc51"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=1),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Noncontinuous Move"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b8bf96c-f4d9-4b7e-ac06-1f9e32eaacf2"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Continuous Move"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6476737e-8ad4-4aac-961b-356be758af8b"",
                    ""path"": ""<XRController>{LeftHand}/*"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Haptic Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""a14b75bd-dcb6-4563-bcf9-982205521c0e"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Rotate Anchor"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""82fd62e6-fe30-4735-b43a-849c8d9409c7"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""08b89d6a-1287-4610-b037-a99af8d98bd7"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8ec81132-06f0-47ad-a54b-f873155ce87b"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis/x"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(min=-1),Invert"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0a4ee7b4-a9e7-4102-b5ec-d3bda80af399"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis/x"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(max=1)"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6570ed7e-9e5e-4f96-932d-3dc37637705c"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Translate Anchor"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0cd2af63-a0eb-47c9-94e7-0ec268eb1801"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis/y"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(max=1)"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Translate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""34b9deb6-91c0-49cd-9f7b-e0fc45fe7b47"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis/y"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(min=-1),Invert"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Translate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7aa054c8-bb27-417f-8c85-28c1a758785e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Translate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f186baf5-ece4-49c1-ad1b-7d59c51e5927"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Translate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""XRI RightHand View"",
            ""id"": ""868113dc-a279-4979-a1a0-971b0a03e160"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""d66a3d0c-8732-49ef-9332-c31cee494399"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""272a4d7b-1384-4d0c-9011-51edd6235897"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""f08716aa-daa8-4607-8540-263d60cca349"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Activate"",
                    ""type"": ""Button"",
                    ""id"": ""6dc01ad7-b658-4cb0-a42e-b9f104475df8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UI Press"",
                    ""type"": ""Button"",
                    ""id"": ""b1413314-46eb-4253-975a-e2468dc9c373"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Haptic Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""55c9829c-3307-4077-ba6f-6a8bdb67376d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport Select"",
                    ""type"": ""Button"",
                    ""id"": ""16725ebb-275f-4062-a6a6-5d35187d6a61"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport Mode Activate"",
                    ""type"": ""Button"",
                    ""id"": ""beea3333-743a-474e-a5ec-549714e3f725"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport Mode Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""b05c4586-d773-48c9-87c9-851c4abe24f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""88316a60-3ccd-4650-a4fa-4d6a4b2c4af9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone(min=0.8)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate Anchor"",
                    ""type"": ""Value"",
                    ""id"": ""f653d24f-936c-413c-ab1b-333391f7a1c2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone(min=0.8)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Translate Anchor"",
                    ""type"": ""Value"",
                    ""id"": ""06501bb4-a8e7-402c-9705-e0adb726c916"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""070fe40d-63e1-4c70-8ac9-de2c6c5f3f25"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""1ccd690c-0558-4c1b-bac7-9a8016885d14"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""6e021bed-342b-42e1-8d33-07e52214dd0d"",
                    ""path"": ""<XRController>{RightHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""ee4afcaa-0b91-4dd7-b5b5-bf66c6b1e17f"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""cdb151b9-2cc8-461b-868e-d44221412204"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""be855417-b889-4de0-83ec-cd9e2417de54"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis"",
                    ""interactions"": ""Sector(directions=1)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Teleport Mode Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""435e7028-9002-444b-b37e-b6585710bc1d"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Teleport Mode Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46604ff4-e03c-45de-8784-ab40e40ecd50"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Teleport Mode Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf649eaa-2341-4c25-b1ee-c0fc5da672fe"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis"",
                    ""interactions"": ""Sector(directions=-1,sweepBehavior=3)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Teleport Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd3ceb91-a32d-4bbc-98d1-af37c6c6a6ee"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Teleport Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""e125c02b-5d40-40b2-96f1-22efb4db801f"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""c1d94139-dbcd-41e9-a9ac-a1c93266bf0f"",
                    ""path"": ""<XRController>{RightHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""63992341-d621-46d8-a347-0692bbbe2986"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""763f0103-9afc-4bcb-9af6-eb7912ca0a40"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""86a33fc1-7ce1-4bd3-b3f5-4bc04dfa420e"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75638abe-6986-4abe-b6dd-afae0eda9e34"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df686728-a183-4f5c-8591-17943e1801a8"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=1),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8abe78c-b1da-43d1-aa71-0730eb6e7f9a"",
                    ""path"": ""<XRController>{RightHand}/*"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Haptic Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b7116c25-9805-4de8-8075-28f165359eca"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Rotate Anchor"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6ed0853f-65a3-46ed-96ef-515bdd0b1d52"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5129a62f-6194-4f63-894c-7c92ab3e2818"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""787804fe-a861-405b-b4e7-427a83f7361c"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis/x"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(min=-1),Invert"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""483f4d8f-1bef-4be2-af85-7b901994566a"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis/x"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(max=1)"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2c0048e0-5f9c-48a1-8772-6196bd843558"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Translate Anchor"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""620ad47c-3dd8-4fbc-b697-3025194487b6"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis/y"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(max=1)"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Translate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b6d06a2a-bd03-4a97-abf5-8890950f19e5"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis/y"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(min=-1),Invert"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Translate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7953c7d2-80b8-4d00-8f34-8bc4c9b352ed"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Translate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f6d6ab9f-ba8e-4856-acd8-24c3c66075f8"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Translate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""EM ExploreMode LeftHand"",
            ""id"": ""5fe596f9-1b7b-49b7-80a7-3b5195caf74d"",
            ""actions"": [
                {
                    ""name"": ""Teleport Mode Activate"",
                    ""type"": ""Button"",
                    ""id"": ""a21db72c-4843-4839-b4d0-3ce8d287cb86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport Mode Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""89ce8348-6001-41a3-85b9-f8f2e2dcad7c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""49c6959a-eecb-4350-a962-7c6ddf1e08a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenCatalogMenu"",
                    ""type"": ""Button"",
                    ""id"": ""8fc8f59f-b0ae-4b28-832a-c370cd07d5bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ae1dde30-781d-4f26-a2f0-052b5cc7c749"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8da6ed3a-f621-49fe-8c76-1f6b7d7754d6"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis"",
                    ""interactions"": ""Sector(directions=-1)"",
                    ""processors"": """",
                    ""groups"": ""Noncontinuous Move"",
                    ""action"": ""Teleport Mode Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8aebee7-fa03-43d4-bfb7-77a3f87452cc"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Teleport Mode Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de7860e6-41ed-4d93-b110-4f42c555e6a4"",
                    ""path"": ""<XRController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenCatalogMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""173237c4-0aa9-407a-8c6f-43bb2c82446f"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Continuous Move"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b7a11fb-740f-48b0-b51e-742a4bef1d27"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""EM ExploreMode RightHand"",
            ""id"": ""7960f8ef-2bf3-4281-aecc-4c03809d6c8c"",
            ""actions"": [
                {
                    ""name"": ""ActivatePlacementMode"",
                    ""type"": ""Button"",
                    ""id"": ""2ac66b47-82f1-4218-9a85-3306b776e26b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""08e8450a-ee2e-4c08-b502-5a83351e8304"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivatePlacementMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""EM PlacementMode LeftHand"",
            ""id"": ""22565f47-ecb4-489d-b957-39c1c6ae6bb9"",
            ""actions"": [
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""e6877c65-5dac-47db-8855-0a9db13a7910"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenCatalogMenu"",
                    ""type"": ""Button"",
                    ""id"": ""1ed345f2-a856-4e50-90e2-eb6b7b8dfb87"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ObjectRotation"",
                    ""type"": ""Button"",
                    ""id"": ""2cdac324-0079-472b-9c11-3d06cea1c931"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ResetRotation"",
                    ""type"": ""Button"",
                    ""id"": ""bd73b38e-7254-4999-abed-2127f04da7ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3ca9c014-ad2d-45be-9010-b8ebed882732"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ObjectRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70024986-069a-4dbf-bf78-f67ea06bf817"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ResetRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e63aa71-3fc9-45a5-a8fc-861a640eb8ae"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efeefb52-5854-4159-88f6-4db560641858"",
                    ""path"": ""<XRController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenCatalogMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""EM PlacementMode RightHand"",
            ""id"": ""0b04e4e0-2872-4f05-a0a9-85d2987e37b5"",
            ""actions"": [
                {
                    ""name"": ""ChangePlacementType"",
                    ""type"": ""Button"",
                    ""id"": ""43f6a2dd-5933-414b-a788-063944ae3d15"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DisablePlacementMode"",
                    ""type"": ""Button"",
                    ""id"": ""03f68f68-ec6a-4d3a-88e6-4a5fb234792b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlaceObject"",
                    ""type"": ""Button"",
                    ""id"": ""6eef6ea1-58f3-453f-9c20-39e5814e5596"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DistanceScroll"",
                    ""type"": ""Value"",
                    ""id"": ""ffff8848-0d24-4fcc-b03b-33075f51700c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwitchTool"",
                    ""type"": ""Button"",
                    ""id"": ""8a48b809-f164-4ac8-ab31-003a05a3a34e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6aaf5f5d-fd41-4284-acf8-7c2c96cc3a74"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DisablePlacementMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fddc7cc2-2f89-468c-9259-7ae66baeffb7"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb6cccea-8bd6-413d-ad78-829c7b6b18c0"",
                    ""path"": ""<XRController>{RightHand}/primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DistanceScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ea2c4d8-eaf8-4a6f-9d3b-cfc0e5d99ca8"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchTool"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49ae8dba-d6c4-46ae-be12-c872c6ad402f"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangePlacementType"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Generic XR Controller"",
            ""bindingGroup"": ""Generic XR Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>{LeftHand}"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{RightHand}"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<WMRHMD>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Continuous Move"",
            ""bindingGroup"": ""Continuous Move"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>{LeftHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{RightHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Noncontinuous Move"",
            ""bindingGroup"": ""Noncontinuous Move"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>{LeftHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{RightHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // XRI HMD
            m_XRIHMD = asset.FindActionMap("XRI HMD", throwIfNotFound: true);
            m_XRIHMD_Position = m_XRIHMD.FindAction("Position", throwIfNotFound: true);
            m_XRIHMD_Rotation = m_XRIHMD.FindAction("Rotation", throwIfNotFound: true);
            // XRI LeftHand View
            m_XRILeftHandView = asset.FindActionMap("XRI LeftHand View", throwIfNotFound: true);
            m_XRILeftHandView_Position = m_XRILeftHandView.FindAction("Position", throwIfNotFound: true);
            m_XRILeftHandView_Rotation = m_XRILeftHandView.FindAction("Rotation", throwIfNotFound: true);
            m_XRILeftHandView_Select = m_XRILeftHandView.FindAction("Select", throwIfNotFound: true);
            m_XRILeftHandView_Activate = m_XRILeftHandView.FindAction("Activate", throwIfNotFound: true);
            m_XRILeftHandView_UIPress = m_XRILeftHandView.FindAction("UI Press", throwIfNotFound: true);
            m_XRILeftHandView_HapticDevice = m_XRILeftHandView.FindAction("Haptic Device", throwIfNotFound: true);
            m_XRILeftHandView_TeleportSelect = m_XRILeftHandView.FindAction("Teleport Select", throwIfNotFound: true);
            m_XRILeftHandView_TeleportModeActivate = m_XRILeftHandView.FindAction("Teleport Mode Activate", throwIfNotFound: true);
            m_XRILeftHandView_TeleportModeCancel = m_XRILeftHandView.FindAction("Teleport Mode Cancel", throwIfNotFound: true);
            m_XRILeftHandView_Turn = m_XRILeftHandView.FindAction("Turn", throwIfNotFound: true);
            m_XRILeftHandView_Move = m_XRILeftHandView.FindAction("Move", throwIfNotFound: true);
            m_XRILeftHandView_RotateAnchor = m_XRILeftHandView.FindAction("Rotate Anchor", throwIfNotFound: true);
            m_XRILeftHandView_TranslateAnchor = m_XRILeftHandView.FindAction("Translate Anchor", throwIfNotFound: true);
            // XRI RightHand View
            m_XRIRightHandView = asset.FindActionMap("XRI RightHand View", throwIfNotFound: true);
            m_XRIRightHandView_Position = m_XRIRightHandView.FindAction("Position", throwIfNotFound: true);
            m_XRIRightHandView_Rotation = m_XRIRightHandView.FindAction("Rotation", throwIfNotFound: true);
            m_XRIRightHandView_Select = m_XRIRightHandView.FindAction("Select", throwIfNotFound: true);
            m_XRIRightHandView_Activate = m_XRIRightHandView.FindAction("Activate", throwIfNotFound: true);
            m_XRIRightHandView_UIPress = m_XRIRightHandView.FindAction("UI Press", throwIfNotFound: true);
            m_XRIRightHandView_HapticDevice = m_XRIRightHandView.FindAction("Haptic Device", throwIfNotFound: true);
            m_XRIRightHandView_TeleportSelect = m_XRIRightHandView.FindAction("Teleport Select", throwIfNotFound: true);
            m_XRIRightHandView_TeleportModeActivate = m_XRIRightHandView.FindAction("Teleport Mode Activate", throwIfNotFound: true);
            m_XRIRightHandView_TeleportModeCancel = m_XRIRightHandView.FindAction("Teleport Mode Cancel", throwIfNotFound: true);
            m_XRIRightHandView_Turn = m_XRIRightHandView.FindAction("Turn", throwIfNotFound: true);
            m_XRIRightHandView_RotateAnchor = m_XRIRightHandView.FindAction("Rotate Anchor", throwIfNotFound: true);
            m_XRIRightHandView_TranslateAnchor = m_XRIRightHandView.FindAction("Translate Anchor", throwIfNotFound: true);
            // EM ExploreMode LeftHand
            m_EMExploreModeLeftHand = asset.FindActionMap("EM ExploreMode LeftHand", throwIfNotFound: true);
            m_EMExploreModeLeftHand_TeleportModeActivate = m_EMExploreModeLeftHand.FindAction("Teleport Mode Activate", throwIfNotFound: true);
            m_EMExploreModeLeftHand_TeleportModeCancel = m_EMExploreModeLeftHand.FindAction("Teleport Mode Cancel", throwIfNotFound: true);
            m_EMExploreModeLeftHand_Menu = m_EMExploreModeLeftHand.FindAction("Menu", throwIfNotFound: true);
            m_EMExploreModeLeftHand_OpenCatalogMenu = m_EMExploreModeLeftHand.FindAction("OpenCatalogMenu", throwIfNotFound: true);
            m_EMExploreModeLeftHand_Move = m_EMExploreModeLeftHand.FindAction("Move", throwIfNotFound: true);
            // EM ExploreMode RightHand
            m_EMExploreModeRightHand = asset.FindActionMap("EM ExploreMode RightHand", throwIfNotFound: true);
            m_EMExploreModeRightHand_ActivatePlacementMode = m_EMExploreModeRightHand.FindAction("ActivatePlacementMode", throwIfNotFound: true);
            // EM PlacementMode LeftHand
            m_EMPlacementModeLeftHand = asset.FindActionMap("EM PlacementMode LeftHand", throwIfNotFound: true);
            m_EMPlacementModeLeftHand_Menu = m_EMPlacementModeLeftHand.FindAction("Menu", throwIfNotFound: true);
            m_EMPlacementModeLeftHand_OpenCatalogMenu = m_EMPlacementModeLeftHand.FindAction("OpenCatalogMenu", throwIfNotFound: true);
            m_EMPlacementModeLeftHand_ObjectRotation = m_EMPlacementModeLeftHand.FindAction("ObjectRotation", throwIfNotFound: true);
            m_EMPlacementModeLeftHand_ResetRotation = m_EMPlacementModeLeftHand.FindAction("ResetRotation", throwIfNotFound: true);
            // EM PlacementMode RightHand
            m_EMPlacementModeRightHand = asset.FindActionMap("EM PlacementMode RightHand", throwIfNotFound: true);
            m_EMPlacementModeRightHand_ChangePlacementType = m_EMPlacementModeRightHand.FindAction("ChangePlacementType", throwIfNotFound: true);
            m_EMPlacementModeRightHand_DisablePlacementMode = m_EMPlacementModeRightHand.FindAction("DisablePlacementMode", throwIfNotFound: true);
            m_EMPlacementModeRightHand_PlaceObject = m_EMPlacementModeRightHand.FindAction("PlaceObject", throwIfNotFound: true);
            m_EMPlacementModeRightHand_DistanceScroll = m_EMPlacementModeRightHand.FindAction("DistanceScroll", throwIfNotFound: true);
            m_EMPlacementModeRightHand_SwitchTool = m_EMPlacementModeRightHand.FindAction("SwitchTool", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // XRI HMD
        private readonly InputActionMap m_XRIHMD;
        private IXRIHMDActions m_XRIHMDActionsCallbackInterface;
        private readonly InputAction m_XRIHMD_Position;
        private readonly InputAction m_XRIHMD_Rotation;
        public struct XRIHMDActions
        {
            private @XRInputActions m_Wrapper;
            public XRIHMDActions(@XRInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Position => m_Wrapper.m_XRIHMD_Position;
            public InputAction @Rotation => m_Wrapper.m_XRIHMD_Rotation;
            public InputActionMap Get() { return m_Wrapper.m_XRIHMD; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(XRIHMDActions set) { return set.Get(); }
            public void SetCallbacks(IXRIHMDActions instance)
            {
                if (m_Wrapper.m_XRIHMDActionsCallbackInterface != null)
                {
                    @Position.started -= m_Wrapper.m_XRIHMDActionsCallbackInterface.OnPosition;
                    @Position.performed -= m_Wrapper.m_XRIHMDActionsCallbackInterface.OnPosition;
                    @Position.canceled -= m_Wrapper.m_XRIHMDActionsCallbackInterface.OnPosition;
                    @Rotation.started -= m_Wrapper.m_XRIHMDActionsCallbackInterface.OnRotation;
                    @Rotation.performed -= m_Wrapper.m_XRIHMDActionsCallbackInterface.OnRotation;
                    @Rotation.canceled -= m_Wrapper.m_XRIHMDActionsCallbackInterface.OnRotation;
                }
                m_Wrapper.m_XRIHMDActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Position.started += instance.OnPosition;
                    @Position.performed += instance.OnPosition;
                    @Position.canceled += instance.OnPosition;
                    @Rotation.started += instance.OnRotation;
                    @Rotation.performed += instance.OnRotation;
                    @Rotation.canceled += instance.OnRotation;
                }
            }
        }
        public XRIHMDActions @XRIHMD => new XRIHMDActions(this);

        // XRI LeftHand View
        private readonly InputActionMap m_XRILeftHandView;
        private IXRILeftHandViewActions m_XRILeftHandViewActionsCallbackInterface;
        private readonly InputAction m_XRILeftHandView_Position;
        private readonly InputAction m_XRILeftHandView_Rotation;
        private readonly InputAction m_XRILeftHandView_Select;
        private readonly InputAction m_XRILeftHandView_Activate;
        private readonly InputAction m_XRILeftHandView_UIPress;
        private readonly InputAction m_XRILeftHandView_HapticDevice;
        private readonly InputAction m_XRILeftHandView_TeleportSelect;
        private readonly InputAction m_XRILeftHandView_TeleportModeActivate;
        private readonly InputAction m_XRILeftHandView_TeleportModeCancel;
        private readonly InputAction m_XRILeftHandView_Turn;
        private readonly InputAction m_XRILeftHandView_Move;
        private readonly InputAction m_XRILeftHandView_RotateAnchor;
        private readonly InputAction m_XRILeftHandView_TranslateAnchor;
        public struct XRILeftHandViewActions
        {
            private @XRInputActions m_Wrapper;
            public XRILeftHandViewActions(@XRInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Position => m_Wrapper.m_XRILeftHandView_Position;
            public InputAction @Rotation => m_Wrapper.m_XRILeftHandView_Rotation;
            public InputAction @Select => m_Wrapper.m_XRILeftHandView_Select;
            public InputAction @Activate => m_Wrapper.m_XRILeftHandView_Activate;
            public InputAction @UIPress => m_Wrapper.m_XRILeftHandView_UIPress;
            public InputAction @HapticDevice => m_Wrapper.m_XRILeftHandView_HapticDevice;
            public InputAction @TeleportSelect => m_Wrapper.m_XRILeftHandView_TeleportSelect;
            public InputAction @TeleportModeActivate => m_Wrapper.m_XRILeftHandView_TeleportModeActivate;
            public InputAction @TeleportModeCancel => m_Wrapper.m_XRILeftHandView_TeleportModeCancel;
            public InputAction @Turn => m_Wrapper.m_XRILeftHandView_Turn;
            public InputAction @Move => m_Wrapper.m_XRILeftHandView_Move;
            public InputAction @RotateAnchor => m_Wrapper.m_XRILeftHandView_RotateAnchor;
            public InputAction @TranslateAnchor => m_Wrapper.m_XRILeftHandView_TranslateAnchor;
            public InputActionMap Get() { return m_Wrapper.m_XRILeftHandView; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(XRILeftHandViewActions set) { return set.Get(); }
            public void SetCallbacks(IXRILeftHandViewActions instance)
            {
                if (m_Wrapper.m_XRILeftHandViewActionsCallbackInterface != null)
                {
                    @Position.started -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnPosition;
                    @Position.performed -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnPosition;
                    @Position.canceled -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnPosition;
                    @Rotation.started -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnRotation;
                    @Rotation.performed -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnRotation;
                    @Rotation.canceled -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnRotation;
                    @Select.started -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnSelect;
                    @Select.performed -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnSelect;
                    @Select.canceled -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnSelect;
                    @Activate.started -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnActivate;
                    @Activate.performed -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnActivate;
                    @Activate.canceled -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnActivate;
                    @UIPress.started -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnUIPress;
                    @UIPress.performed -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnUIPress;
                    @UIPress.canceled -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnUIPress;
                    @HapticDevice.started -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnHapticDevice;
                    @HapticDevice.performed -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnHapticDevice;
                    @HapticDevice.canceled -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnHapticDevice;
                    @TeleportSelect.started -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnTeleportSelect;
                    @TeleportSelect.performed -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnTeleportSelect;
                    @TeleportSelect.canceled -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnTeleportSelect;
                    @TeleportModeActivate.started -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnTeleportModeActivate;
                    @TeleportModeActivate.performed -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnTeleportModeActivate;
                    @TeleportModeActivate.canceled -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnTeleportModeActivate;
                    @TeleportModeCancel.started -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnTeleportModeCancel;
                    @TeleportModeCancel.performed -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnTeleportModeCancel;
                    @TeleportModeCancel.canceled -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnTeleportModeCancel;
                    @Turn.started -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnTurn;
                    @Turn.performed -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnTurn;
                    @Turn.canceled -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnTurn;
                    @Move.started -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnMove;
                    @RotateAnchor.started -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnRotateAnchor;
                    @RotateAnchor.performed -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnRotateAnchor;
                    @RotateAnchor.canceled -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnRotateAnchor;
                    @TranslateAnchor.started -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnTranslateAnchor;
                    @TranslateAnchor.performed -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnTranslateAnchor;
                    @TranslateAnchor.canceled -= m_Wrapper.m_XRILeftHandViewActionsCallbackInterface.OnTranslateAnchor;
                }
                m_Wrapper.m_XRILeftHandViewActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Position.started += instance.OnPosition;
                    @Position.performed += instance.OnPosition;
                    @Position.canceled += instance.OnPosition;
                    @Rotation.started += instance.OnRotation;
                    @Rotation.performed += instance.OnRotation;
                    @Rotation.canceled += instance.OnRotation;
                    @Select.started += instance.OnSelect;
                    @Select.performed += instance.OnSelect;
                    @Select.canceled += instance.OnSelect;
                    @Activate.started += instance.OnActivate;
                    @Activate.performed += instance.OnActivate;
                    @Activate.canceled += instance.OnActivate;
                    @UIPress.started += instance.OnUIPress;
                    @UIPress.performed += instance.OnUIPress;
                    @UIPress.canceled += instance.OnUIPress;
                    @HapticDevice.started += instance.OnHapticDevice;
                    @HapticDevice.performed += instance.OnHapticDevice;
                    @HapticDevice.canceled += instance.OnHapticDevice;
                    @TeleportSelect.started += instance.OnTeleportSelect;
                    @TeleportSelect.performed += instance.OnTeleportSelect;
                    @TeleportSelect.canceled += instance.OnTeleportSelect;
                    @TeleportModeActivate.started += instance.OnTeleportModeActivate;
                    @TeleportModeActivate.performed += instance.OnTeleportModeActivate;
                    @TeleportModeActivate.canceled += instance.OnTeleportModeActivate;
                    @TeleportModeCancel.started += instance.OnTeleportModeCancel;
                    @TeleportModeCancel.performed += instance.OnTeleportModeCancel;
                    @TeleportModeCancel.canceled += instance.OnTeleportModeCancel;
                    @Turn.started += instance.OnTurn;
                    @Turn.performed += instance.OnTurn;
                    @Turn.canceled += instance.OnTurn;
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @RotateAnchor.started += instance.OnRotateAnchor;
                    @RotateAnchor.performed += instance.OnRotateAnchor;
                    @RotateAnchor.canceled += instance.OnRotateAnchor;
                    @TranslateAnchor.started += instance.OnTranslateAnchor;
                    @TranslateAnchor.performed += instance.OnTranslateAnchor;
                    @TranslateAnchor.canceled += instance.OnTranslateAnchor;
                }
            }
        }
        public XRILeftHandViewActions @XRILeftHandView => new XRILeftHandViewActions(this);

        // XRI RightHand View
        private readonly InputActionMap m_XRIRightHandView;
        private IXRIRightHandViewActions m_XRIRightHandViewActionsCallbackInterface;
        private readonly InputAction m_XRIRightHandView_Position;
        private readonly InputAction m_XRIRightHandView_Rotation;
        private readonly InputAction m_XRIRightHandView_Select;
        private readonly InputAction m_XRIRightHandView_Activate;
        private readonly InputAction m_XRIRightHandView_UIPress;
        private readonly InputAction m_XRIRightHandView_HapticDevice;
        private readonly InputAction m_XRIRightHandView_TeleportSelect;
        private readonly InputAction m_XRIRightHandView_TeleportModeActivate;
        private readonly InputAction m_XRIRightHandView_TeleportModeCancel;
        private readonly InputAction m_XRIRightHandView_Turn;
        private readonly InputAction m_XRIRightHandView_RotateAnchor;
        private readonly InputAction m_XRIRightHandView_TranslateAnchor;
        public struct XRIRightHandViewActions
        {
            private @XRInputActions m_Wrapper;
            public XRIRightHandViewActions(@XRInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Position => m_Wrapper.m_XRIRightHandView_Position;
            public InputAction @Rotation => m_Wrapper.m_XRIRightHandView_Rotation;
            public InputAction @Select => m_Wrapper.m_XRIRightHandView_Select;
            public InputAction @Activate => m_Wrapper.m_XRIRightHandView_Activate;
            public InputAction @UIPress => m_Wrapper.m_XRIRightHandView_UIPress;
            public InputAction @HapticDevice => m_Wrapper.m_XRIRightHandView_HapticDevice;
            public InputAction @TeleportSelect => m_Wrapper.m_XRIRightHandView_TeleportSelect;
            public InputAction @TeleportModeActivate => m_Wrapper.m_XRIRightHandView_TeleportModeActivate;
            public InputAction @TeleportModeCancel => m_Wrapper.m_XRIRightHandView_TeleportModeCancel;
            public InputAction @Turn => m_Wrapper.m_XRIRightHandView_Turn;
            public InputAction @RotateAnchor => m_Wrapper.m_XRIRightHandView_RotateAnchor;
            public InputAction @TranslateAnchor => m_Wrapper.m_XRIRightHandView_TranslateAnchor;
            public InputActionMap Get() { return m_Wrapper.m_XRIRightHandView; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(XRIRightHandViewActions set) { return set.Get(); }
            public void SetCallbacks(IXRIRightHandViewActions instance)
            {
                if (m_Wrapper.m_XRIRightHandViewActionsCallbackInterface != null)
                {
                    @Position.started -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnPosition;
                    @Position.performed -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnPosition;
                    @Position.canceled -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnPosition;
                    @Rotation.started -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnRotation;
                    @Rotation.performed -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnRotation;
                    @Rotation.canceled -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnRotation;
                    @Select.started -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnSelect;
                    @Select.performed -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnSelect;
                    @Select.canceled -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnSelect;
                    @Activate.started -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnActivate;
                    @Activate.performed -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnActivate;
                    @Activate.canceled -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnActivate;
                    @UIPress.started -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnUIPress;
                    @UIPress.performed -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnUIPress;
                    @UIPress.canceled -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnUIPress;
                    @HapticDevice.started -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnHapticDevice;
                    @HapticDevice.performed -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnHapticDevice;
                    @HapticDevice.canceled -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnHapticDevice;
                    @TeleportSelect.started -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnTeleportSelect;
                    @TeleportSelect.performed -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnTeleportSelect;
                    @TeleportSelect.canceled -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnTeleportSelect;
                    @TeleportModeActivate.started -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnTeleportModeActivate;
                    @TeleportModeActivate.performed -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnTeleportModeActivate;
                    @TeleportModeActivate.canceled -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnTeleportModeActivate;
                    @TeleportModeCancel.started -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnTeleportModeCancel;
                    @TeleportModeCancel.performed -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnTeleportModeCancel;
                    @TeleportModeCancel.canceled -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnTeleportModeCancel;
                    @Turn.started -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnTurn;
                    @Turn.performed -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnTurn;
                    @Turn.canceled -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnTurn;
                    @RotateAnchor.started -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnRotateAnchor;
                    @RotateAnchor.performed -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnRotateAnchor;
                    @RotateAnchor.canceled -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnRotateAnchor;
                    @TranslateAnchor.started -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnTranslateAnchor;
                    @TranslateAnchor.performed -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnTranslateAnchor;
                    @TranslateAnchor.canceled -= m_Wrapper.m_XRIRightHandViewActionsCallbackInterface.OnTranslateAnchor;
                }
                m_Wrapper.m_XRIRightHandViewActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Position.started += instance.OnPosition;
                    @Position.performed += instance.OnPosition;
                    @Position.canceled += instance.OnPosition;
                    @Rotation.started += instance.OnRotation;
                    @Rotation.performed += instance.OnRotation;
                    @Rotation.canceled += instance.OnRotation;
                    @Select.started += instance.OnSelect;
                    @Select.performed += instance.OnSelect;
                    @Select.canceled += instance.OnSelect;
                    @Activate.started += instance.OnActivate;
                    @Activate.performed += instance.OnActivate;
                    @Activate.canceled += instance.OnActivate;
                    @UIPress.started += instance.OnUIPress;
                    @UIPress.performed += instance.OnUIPress;
                    @UIPress.canceled += instance.OnUIPress;
                    @HapticDevice.started += instance.OnHapticDevice;
                    @HapticDevice.performed += instance.OnHapticDevice;
                    @HapticDevice.canceled += instance.OnHapticDevice;
                    @TeleportSelect.started += instance.OnTeleportSelect;
                    @TeleportSelect.performed += instance.OnTeleportSelect;
                    @TeleportSelect.canceled += instance.OnTeleportSelect;
                    @TeleportModeActivate.started += instance.OnTeleportModeActivate;
                    @TeleportModeActivate.performed += instance.OnTeleportModeActivate;
                    @TeleportModeActivate.canceled += instance.OnTeleportModeActivate;
                    @TeleportModeCancel.started += instance.OnTeleportModeCancel;
                    @TeleportModeCancel.performed += instance.OnTeleportModeCancel;
                    @TeleportModeCancel.canceled += instance.OnTeleportModeCancel;
                    @Turn.started += instance.OnTurn;
                    @Turn.performed += instance.OnTurn;
                    @Turn.canceled += instance.OnTurn;
                    @RotateAnchor.started += instance.OnRotateAnchor;
                    @RotateAnchor.performed += instance.OnRotateAnchor;
                    @RotateAnchor.canceled += instance.OnRotateAnchor;
                    @TranslateAnchor.started += instance.OnTranslateAnchor;
                    @TranslateAnchor.performed += instance.OnTranslateAnchor;
                    @TranslateAnchor.canceled += instance.OnTranslateAnchor;
                }
            }
        }
        public XRIRightHandViewActions @XRIRightHandView => new XRIRightHandViewActions(this);

        // EM ExploreMode LeftHand
        private readonly InputActionMap m_EMExploreModeLeftHand;
        private IEMExploreModeLeftHandActions m_EMExploreModeLeftHandActionsCallbackInterface;
        private readonly InputAction m_EMExploreModeLeftHand_TeleportModeActivate;
        private readonly InputAction m_EMExploreModeLeftHand_TeleportModeCancel;
        private readonly InputAction m_EMExploreModeLeftHand_Menu;
        private readonly InputAction m_EMExploreModeLeftHand_OpenCatalogMenu;
        private readonly InputAction m_EMExploreModeLeftHand_Move;
        public struct EMExploreModeLeftHandActions
        {
            private @XRInputActions m_Wrapper;
            public EMExploreModeLeftHandActions(@XRInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @TeleportModeActivate => m_Wrapper.m_EMExploreModeLeftHand_TeleportModeActivate;
            public InputAction @TeleportModeCancel => m_Wrapper.m_EMExploreModeLeftHand_TeleportModeCancel;
            public InputAction @Menu => m_Wrapper.m_EMExploreModeLeftHand_Menu;
            public InputAction @OpenCatalogMenu => m_Wrapper.m_EMExploreModeLeftHand_OpenCatalogMenu;
            public InputAction @Move => m_Wrapper.m_EMExploreModeLeftHand_Move;
            public InputActionMap Get() { return m_Wrapper.m_EMExploreModeLeftHand; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(EMExploreModeLeftHandActions set) { return set.Get(); }
            public void SetCallbacks(IEMExploreModeLeftHandActions instance)
            {
                if (m_Wrapper.m_EMExploreModeLeftHandActionsCallbackInterface != null)
                {
                    @TeleportModeActivate.started -= m_Wrapper.m_EMExploreModeLeftHandActionsCallbackInterface.OnTeleportModeActivate;
                    @TeleportModeActivate.performed -= m_Wrapper.m_EMExploreModeLeftHandActionsCallbackInterface.OnTeleportModeActivate;
                    @TeleportModeActivate.canceled -= m_Wrapper.m_EMExploreModeLeftHandActionsCallbackInterface.OnTeleportModeActivate;
                    @TeleportModeCancel.started -= m_Wrapper.m_EMExploreModeLeftHandActionsCallbackInterface.OnTeleportModeCancel;
                    @TeleportModeCancel.performed -= m_Wrapper.m_EMExploreModeLeftHandActionsCallbackInterface.OnTeleportModeCancel;
                    @TeleportModeCancel.canceled -= m_Wrapper.m_EMExploreModeLeftHandActionsCallbackInterface.OnTeleportModeCancel;
                    @Menu.started -= m_Wrapper.m_EMExploreModeLeftHandActionsCallbackInterface.OnMenu;
                    @Menu.performed -= m_Wrapper.m_EMExploreModeLeftHandActionsCallbackInterface.OnMenu;
                    @Menu.canceled -= m_Wrapper.m_EMExploreModeLeftHandActionsCallbackInterface.OnMenu;
                    @OpenCatalogMenu.started -= m_Wrapper.m_EMExploreModeLeftHandActionsCallbackInterface.OnOpenCatalogMenu;
                    @OpenCatalogMenu.performed -= m_Wrapper.m_EMExploreModeLeftHandActionsCallbackInterface.OnOpenCatalogMenu;
                    @OpenCatalogMenu.canceled -= m_Wrapper.m_EMExploreModeLeftHandActionsCallbackInterface.OnOpenCatalogMenu;
                    @Move.started -= m_Wrapper.m_EMExploreModeLeftHandActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_EMExploreModeLeftHandActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_EMExploreModeLeftHandActionsCallbackInterface.OnMove;
                }
                m_Wrapper.m_EMExploreModeLeftHandActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @TeleportModeActivate.started += instance.OnTeleportModeActivate;
                    @TeleportModeActivate.performed += instance.OnTeleportModeActivate;
                    @TeleportModeActivate.canceled += instance.OnTeleportModeActivate;
                    @TeleportModeCancel.started += instance.OnTeleportModeCancel;
                    @TeleportModeCancel.performed += instance.OnTeleportModeCancel;
                    @TeleportModeCancel.canceled += instance.OnTeleportModeCancel;
                    @Menu.started += instance.OnMenu;
                    @Menu.performed += instance.OnMenu;
                    @Menu.canceled += instance.OnMenu;
                    @OpenCatalogMenu.started += instance.OnOpenCatalogMenu;
                    @OpenCatalogMenu.performed += instance.OnOpenCatalogMenu;
                    @OpenCatalogMenu.canceled += instance.OnOpenCatalogMenu;
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                }
            }
        }
        public EMExploreModeLeftHandActions @EMExploreModeLeftHand => new EMExploreModeLeftHandActions(this);

        // EM ExploreMode RightHand
        private readonly InputActionMap m_EMExploreModeRightHand;
        private IEMExploreModeRightHandActions m_EMExploreModeRightHandActionsCallbackInterface;
        private readonly InputAction m_EMExploreModeRightHand_ActivatePlacementMode;
        public struct EMExploreModeRightHandActions
        {
            private @XRInputActions m_Wrapper;
            public EMExploreModeRightHandActions(@XRInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @ActivatePlacementMode => m_Wrapper.m_EMExploreModeRightHand_ActivatePlacementMode;
            public InputActionMap Get() { return m_Wrapper.m_EMExploreModeRightHand; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(EMExploreModeRightHandActions set) { return set.Get(); }
            public void SetCallbacks(IEMExploreModeRightHandActions instance)
            {
                if (m_Wrapper.m_EMExploreModeRightHandActionsCallbackInterface != null)
                {
                    @ActivatePlacementMode.started -= m_Wrapper.m_EMExploreModeRightHandActionsCallbackInterface.OnActivatePlacementMode;
                    @ActivatePlacementMode.performed -= m_Wrapper.m_EMExploreModeRightHandActionsCallbackInterface.OnActivatePlacementMode;
                    @ActivatePlacementMode.canceled -= m_Wrapper.m_EMExploreModeRightHandActionsCallbackInterface.OnActivatePlacementMode;
                }
                m_Wrapper.m_EMExploreModeRightHandActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @ActivatePlacementMode.started += instance.OnActivatePlacementMode;
                    @ActivatePlacementMode.performed += instance.OnActivatePlacementMode;
                    @ActivatePlacementMode.canceled += instance.OnActivatePlacementMode;
                }
            }
        }
        public EMExploreModeRightHandActions @EMExploreModeRightHand => new EMExploreModeRightHandActions(this);

        // EM PlacementMode LeftHand
        private readonly InputActionMap m_EMPlacementModeLeftHand;
        private IEMPlacementModeLeftHandActions m_EMPlacementModeLeftHandActionsCallbackInterface;
        private readonly InputAction m_EMPlacementModeLeftHand_Menu;
        private readonly InputAction m_EMPlacementModeLeftHand_OpenCatalogMenu;
        private readonly InputAction m_EMPlacementModeLeftHand_ObjectRotation;
        private readonly InputAction m_EMPlacementModeLeftHand_ResetRotation;
        public struct EMPlacementModeLeftHandActions
        {
            private @XRInputActions m_Wrapper;
            public EMPlacementModeLeftHandActions(@XRInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Menu => m_Wrapper.m_EMPlacementModeLeftHand_Menu;
            public InputAction @OpenCatalogMenu => m_Wrapper.m_EMPlacementModeLeftHand_OpenCatalogMenu;
            public InputAction @ObjectRotation => m_Wrapper.m_EMPlacementModeLeftHand_ObjectRotation;
            public InputAction @ResetRotation => m_Wrapper.m_EMPlacementModeLeftHand_ResetRotation;
            public InputActionMap Get() { return m_Wrapper.m_EMPlacementModeLeftHand; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(EMPlacementModeLeftHandActions set) { return set.Get(); }
            public void SetCallbacks(IEMPlacementModeLeftHandActions instance)
            {
                if (m_Wrapper.m_EMPlacementModeLeftHandActionsCallbackInterface != null)
                {
                    @Menu.started -= m_Wrapper.m_EMPlacementModeLeftHandActionsCallbackInterface.OnMenu;
                    @Menu.performed -= m_Wrapper.m_EMPlacementModeLeftHandActionsCallbackInterface.OnMenu;
                    @Menu.canceled -= m_Wrapper.m_EMPlacementModeLeftHandActionsCallbackInterface.OnMenu;
                    @OpenCatalogMenu.started -= m_Wrapper.m_EMPlacementModeLeftHandActionsCallbackInterface.OnOpenCatalogMenu;
                    @OpenCatalogMenu.performed -= m_Wrapper.m_EMPlacementModeLeftHandActionsCallbackInterface.OnOpenCatalogMenu;
                    @OpenCatalogMenu.canceled -= m_Wrapper.m_EMPlacementModeLeftHandActionsCallbackInterface.OnOpenCatalogMenu;
                    @ObjectRotation.started -= m_Wrapper.m_EMPlacementModeLeftHandActionsCallbackInterface.OnObjectRotation;
                    @ObjectRotation.performed -= m_Wrapper.m_EMPlacementModeLeftHandActionsCallbackInterface.OnObjectRotation;
                    @ObjectRotation.canceled -= m_Wrapper.m_EMPlacementModeLeftHandActionsCallbackInterface.OnObjectRotation;
                    @ResetRotation.started -= m_Wrapper.m_EMPlacementModeLeftHandActionsCallbackInterface.OnResetRotation;
                    @ResetRotation.performed -= m_Wrapper.m_EMPlacementModeLeftHandActionsCallbackInterface.OnResetRotation;
                    @ResetRotation.canceled -= m_Wrapper.m_EMPlacementModeLeftHandActionsCallbackInterface.OnResetRotation;
                }
                m_Wrapper.m_EMPlacementModeLeftHandActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Menu.started += instance.OnMenu;
                    @Menu.performed += instance.OnMenu;
                    @Menu.canceled += instance.OnMenu;
                    @OpenCatalogMenu.started += instance.OnOpenCatalogMenu;
                    @OpenCatalogMenu.performed += instance.OnOpenCatalogMenu;
                    @OpenCatalogMenu.canceled += instance.OnOpenCatalogMenu;
                    @ObjectRotation.started += instance.OnObjectRotation;
                    @ObjectRotation.performed += instance.OnObjectRotation;
                    @ObjectRotation.canceled += instance.OnObjectRotation;
                    @ResetRotation.started += instance.OnResetRotation;
                    @ResetRotation.performed += instance.OnResetRotation;
                    @ResetRotation.canceled += instance.OnResetRotation;
                }
            }
        }
        public EMPlacementModeLeftHandActions @EMPlacementModeLeftHand => new EMPlacementModeLeftHandActions(this);

        // EM PlacementMode RightHand
        private readonly InputActionMap m_EMPlacementModeRightHand;
        private IEMPlacementModeRightHandActions m_EMPlacementModeRightHandActionsCallbackInterface;
        private readonly InputAction m_EMPlacementModeRightHand_ChangePlacementType;
        private readonly InputAction m_EMPlacementModeRightHand_DisablePlacementMode;
        private readonly InputAction m_EMPlacementModeRightHand_PlaceObject;
        private readonly InputAction m_EMPlacementModeRightHand_DistanceScroll;
        private readonly InputAction m_EMPlacementModeRightHand_SwitchTool;
        public struct EMPlacementModeRightHandActions
        {
            private @XRInputActions m_Wrapper;
            public EMPlacementModeRightHandActions(@XRInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @ChangePlacementType => m_Wrapper.m_EMPlacementModeRightHand_ChangePlacementType;
            public InputAction @DisablePlacementMode => m_Wrapper.m_EMPlacementModeRightHand_DisablePlacementMode;
            public InputAction @PlaceObject => m_Wrapper.m_EMPlacementModeRightHand_PlaceObject;
            public InputAction @DistanceScroll => m_Wrapper.m_EMPlacementModeRightHand_DistanceScroll;
            public InputAction @SwitchTool => m_Wrapper.m_EMPlacementModeRightHand_SwitchTool;
            public InputActionMap Get() { return m_Wrapper.m_EMPlacementModeRightHand; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(EMPlacementModeRightHandActions set) { return set.Get(); }
            public void SetCallbacks(IEMPlacementModeRightHandActions instance)
            {
                if (m_Wrapper.m_EMPlacementModeRightHandActionsCallbackInterface != null)
                {
                    @ChangePlacementType.started -= m_Wrapper.m_EMPlacementModeRightHandActionsCallbackInterface.OnChangePlacementType;
                    @ChangePlacementType.performed -= m_Wrapper.m_EMPlacementModeRightHandActionsCallbackInterface.OnChangePlacementType;
                    @ChangePlacementType.canceled -= m_Wrapper.m_EMPlacementModeRightHandActionsCallbackInterface.OnChangePlacementType;
                    @DisablePlacementMode.started -= m_Wrapper.m_EMPlacementModeRightHandActionsCallbackInterface.OnDisablePlacementMode;
                    @DisablePlacementMode.performed -= m_Wrapper.m_EMPlacementModeRightHandActionsCallbackInterface.OnDisablePlacementMode;
                    @DisablePlacementMode.canceled -= m_Wrapper.m_EMPlacementModeRightHandActionsCallbackInterface.OnDisablePlacementMode;
                    @PlaceObject.started -= m_Wrapper.m_EMPlacementModeRightHandActionsCallbackInterface.OnPlaceObject;
                    @PlaceObject.performed -= m_Wrapper.m_EMPlacementModeRightHandActionsCallbackInterface.OnPlaceObject;
                    @PlaceObject.canceled -= m_Wrapper.m_EMPlacementModeRightHandActionsCallbackInterface.OnPlaceObject;
                    @DistanceScroll.started -= m_Wrapper.m_EMPlacementModeRightHandActionsCallbackInterface.OnDistanceScroll;
                    @DistanceScroll.performed -= m_Wrapper.m_EMPlacementModeRightHandActionsCallbackInterface.OnDistanceScroll;
                    @DistanceScroll.canceled -= m_Wrapper.m_EMPlacementModeRightHandActionsCallbackInterface.OnDistanceScroll;
                    @SwitchTool.started -= m_Wrapper.m_EMPlacementModeRightHandActionsCallbackInterface.OnSwitchTool;
                    @SwitchTool.performed -= m_Wrapper.m_EMPlacementModeRightHandActionsCallbackInterface.OnSwitchTool;
                    @SwitchTool.canceled -= m_Wrapper.m_EMPlacementModeRightHandActionsCallbackInterface.OnSwitchTool;
                }
                m_Wrapper.m_EMPlacementModeRightHandActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @ChangePlacementType.started += instance.OnChangePlacementType;
                    @ChangePlacementType.performed += instance.OnChangePlacementType;
                    @ChangePlacementType.canceled += instance.OnChangePlacementType;
                    @DisablePlacementMode.started += instance.OnDisablePlacementMode;
                    @DisablePlacementMode.performed += instance.OnDisablePlacementMode;
                    @DisablePlacementMode.canceled += instance.OnDisablePlacementMode;
                    @PlaceObject.started += instance.OnPlaceObject;
                    @PlaceObject.performed += instance.OnPlaceObject;
                    @PlaceObject.canceled += instance.OnPlaceObject;
                    @DistanceScroll.started += instance.OnDistanceScroll;
                    @DistanceScroll.performed += instance.OnDistanceScroll;
                    @DistanceScroll.canceled += instance.OnDistanceScroll;
                    @SwitchTool.started += instance.OnSwitchTool;
                    @SwitchTool.performed += instance.OnSwitchTool;
                    @SwitchTool.canceled += instance.OnSwitchTool;
                }
            }
        }
        public EMPlacementModeRightHandActions @EMPlacementModeRightHand => new EMPlacementModeRightHandActions(this);
        private int m_GenericXRControllerSchemeIndex = -1;
        public InputControlScheme GenericXRControllerScheme
        {
            get
            {
                if (m_GenericXRControllerSchemeIndex == -1) m_GenericXRControllerSchemeIndex = asset.FindControlSchemeIndex("Generic XR Controller");
                return asset.controlSchemes[m_GenericXRControllerSchemeIndex];
            }
        }
        private int m_ContinuousMoveSchemeIndex = -1;
        public InputControlScheme ContinuousMoveScheme
        {
            get
            {
                if (m_ContinuousMoveSchemeIndex == -1) m_ContinuousMoveSchemeIndex = asset.FindControlSchemeIndex("Continuous Move");
                return asset.controlSchemes[m_ContinuousMoveSchemeIndex];
            }
        }
        private int m_NoncontinuousMoveSchemeIndex = -1;
        public InputControlScheme NoncontinuousMoveScheme
        {
            get
            {
                if (m_NoncontinuousMoveSchemeIndex == -1) m_NoncontinuousMoveSchemeIndex = asset.FindControlSchemeIndex("Noncontinuous Move");
                return asset.controlSchemes[m_NoncontinuousMoveSchemeIndex];
            }
        }
        public interface IXRIHMDActions
        {
            void OnPosition(InputAction.CallbackContext context);
            void OnRotation(InputAction.CallbackContext context);
        }
        public interface IXRILeftHandViewActions
        {
            void OnPosition(InputAction.CallbackContext context);
            void OnRotation(InputAction.CallbackContext context);
            void OnSelect(InputAction.CallbackContext context);
            void OnActivate(InputAction.CallbackContext context);
            void OnUIPress(InputAction.CallbackContext context);
            void OnHapticDevice(InputAction.CallbackContext context);
            void OnTeleportSelect(InputAction.CallbackContext context);
            void OnTeleportModeActivate(InputAction.CallbackContext context);
            void OnTeleportModeCancel(InputAction.CallbackContext context);
            void OnTurn(InputAction.CallbackContext context);
            void OnMove(InputAction.CallbackContext context);
            void OnRotateAnchor(InputAction.CallbackContext context);
            void OnTranslateAnchor(InputAction.CallbackContext context);
        }
        public interface IXRIRightHandViewActions
        {
            void OnPosition(InputAction.CallbackContext context);
            void OnRotation(InputAction.CallbackContext context);
            void OnSelect(InputAction.CallbackContext context);
            void OnActivate(InputAction.CallbackContext context);
            void OnUIPress(InputAction.CallbackContext context);
            void OnHapticDevice(InputAction.CallbackContext context);
            void OnTeleportSelect(InputAction.CallbackContext context);
            void OnTeleportModeActivate(InputAction.CallbackContext context);
            void OnTeleportModeCancel(InputAction.CallbackContext context);
            void OnTurn(InputAction.CallbackContext context);
            void OnRotateAnchor(InputAction.CallbackContext context);
            void OnTranslateAnchor(InputAction.CallbackContext context);
        }
        public interface IEMExploreModeLeftHandActions
        {
            void OnTeleportModeActivate(InputAction.CallbackContext context);
            void OnTeleportModeCancel(InputAction.CallbackContext context);
            void OnMenu(InputAction.CallbackContext context);
            void OnOpenCatalogMenu(InputAction.CallbackContext context);
            void OnMove(InputAction.CallbackContext context);
        }
        public interface IEMExploreModeRightHandActions
        {
            void OnActivatePlacementMode(InputAction.CallbackContext context);
        }
        public interface IEMPlacementModeLeftHandActions
        {
            void OnMenu(InputAction.CallbackContext context);
            void OnOpenCatalogMenu(InputAction.CallbackContext context);
            void OnObjectRotation(InputAction.CallbackContext context);
            void OnResetRotation(InputAction.CallbackContext context);
        }
        public interface IEMPlacementModeRightHandActions
        {
            void OnChangePlacementType(InputAction.CallbackContext context);
            void OnDisablePlacementMode(InputAction.CallbackContext context);
            void OnPlaceObject(InputAction.CallbackContext context);
            void OnDistanceScroll(InputAction.CallbackContext context);
            void OnSwitchTool(InputAction.CallbackContext context);
        }
    }
}
